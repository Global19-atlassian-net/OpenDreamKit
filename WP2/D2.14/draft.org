* Deliverable online:

https://github.com/OpenDreamKit/OpenDreamKit/issues/39

* TODO list (from https://github.com/OpenDreamKit/OpenDreamKit)

Steps for the deliverable lead

Edit the github issue description (i.e. its first comment) to give an overview (think abstract of a paper) of the deliverable. This information will be included at the beginning of the report.

What was the original goal.

How it fits within the overall ODK picture.

Where the work started from.

What precisely is the deliverable, and was achieved during the project, clarifying the contribution of the ODK participants and of the community.

A brief view on applications, further outcomes, current activities, future plans.

The distinction between what was done before, for, and after the deliverable should be strictly unambigous.

This description should be self-contained. Still, it's recommended to enrich it with cross links as appropriate. In particular add links for all issues on the different component trackers (trac, ...) that have been worked on to achieve the deliverable. The link label/context should be explanatory: the reader should not need to follow the link to know what additional information it provides.

If this gets too long (say more than one page), the details can be left to the report itself.

Double check the deliverable metadata is up to date:

Leader (as specified by the person the issue is assigned to), participants, and sites involved.
Due and delivery date, milestone.
Estimate of the number of PM's that were put to achieve the deliverable.
Link to the relevant ODK task(s) and reciprocally.
(when times come): link to the report and presentation slides.
A report should be written, in LaTeX, and in WPX/DX.Z/report.tex, using our style file. You can initialize the report file and copy the relevant style files with:

make WPX/DX.Z/report.pdf
Rerunning this command later will update the style files if needed and recompile the report.

See the existing reports for further examples.

The github issue description is semi-automatically included in the report. To fetch it from github, run the following command from ODK's main repository (no worry if this step fails for you; the coordinator will anyway run it before submitting the deliverable):

DIR=WPX/DX.Z; rm $DIR/report.pdf $DIR/github-issue-description*; make $DIR/report.pdf
The report shall be self-contained. Indeed, the deliverable will be evaluated based upon its version submitted on the EU portal without retrieving other resources. Links have no legal value, since there is no guarantee that the referenced material will remain unchanged. One may typically want to add relevant material as appendix (e.g. snapshots of software documentation, websites, or other relevant documents); see e.g. WP5/D5.1/report.tex or WP2/D2.1/report.tex.

The use of pictures and other visual material is strongly recommended.

Defining authorship is tricky, as most deliverable involve close collaboration with the community, and the report is often written by a subset of the contributors. Let's use the following simple rule of thumb: the authors of the report should include all persons funded by ODK that contributed non trivially. Not including outsiders in the author list is reasonable, as the report is about the contribution of ODK.

Request early feedback, review, and final proofreading of the report

by the work package leader
by the coordinator (coordinator@opendreamkit.org)
by whoever else you may think is relevant
Plan ahead, as this will take a couple days!

Write a blog post in ODK's news

Send a notice to participants@opendreamkit.org


* Data
** Introduction to Python for Computational Science and Engineering

- Textbook at https://github.com/fangohr/introduction-to-python-for-computational-science-and-engineering/blob/master/Readme.md
- consists of notebooks
- can be executed online using Binder
- tested with NBVal
- lower barrier towards testing things
- output as html and pdf available

- attached pdf to deliverable
