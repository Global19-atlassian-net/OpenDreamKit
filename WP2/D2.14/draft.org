* Deliverable online:

https://github.com/OpenDreamKit/OpenDreamKit/issues/39

* TODO list (from https://github.com/OpenDreamKit/OpenDreamKit)

Steps for the deliverable lead

Edit the github issue description (i.e. its first comment) to give an overview (think abstract of a paper) of the deliverable. This information will be included at the beginning of the report.

What was the original goal.

How it fits within the overall ODK picture.

Where the work started from.

What precisely is the deliverable, and was achieved during the project, clarifying the contribution of the ODK participants and of the community.

A brief view on applications, further outcomes, current activities, future plans.

The distinction between what was done before, for, and after the deliverable should be strictly unambigous.

This description should be self-contained. Still, it's recommended to enrich it with cross links as appropriate. In particular add links for all issues on the different component trackers (trac, ...) that have been worked on to achieve the deliverable. The link label/context should be explanatory: the reader should not need to follow the link to know what additional information it provides.

If this gets too long (say more than one page), the details can be left to the report itself.

Double check the deliverable metadata is up to date:

Leader (as specified by the person the issue is assigned to), participants, and sites involved.
Due and delivery date, milestone.
Estimate of the number of PM's that were put to achieve the deliverable.
Link to the relevant ODK task(s) and reciprocally.
(when times come): link to the report and presentation slides.
A report should be written, in LaTeX, and in WPX/DX.Z/report.tex, using our style file. You can initialize the report file and copy the relevant style files with:

make WPX/DX.Z/report.pdf
Rerunning this command later will update the style files if needed and recompile the report.

See the existing reports for further examples.

The github issue description is semi-automatically included in the report. To fetch it from github, run the following command from ODK's main repository (no worry if this step fails for you; the coordinator will anyway run it before submitting the deliverable):

DIR=WPX/DX.Z; rm $DIR/report.pdf $DIR/github-issue-description*; make $DIR/report.pdf
The report shall be self-contained. Indeed, the deliverable will be evaluated based upon its version submitted on the EU portal without retrieving other resources. Links have no legal value, since there is no guarantee that the referenced material will remain unchanged. One may typically want to add relevant material as appendix (e.g. snapshots of software documentation, websites, or other relevant documents); see e.g. WP5/D5.1/report.tex or WP2/D2.1/report.tex.

The use of pictures and other visual material is strongly recommended.

Defining authorship is tricky, as most deliverable involve close collaboration with the community, and the report is often written by a subset of the contributors. Let's use the following simple rule of thumb: the authors of the report should include all persons funded by ODK that contributed non trivially. Not including outsiders in the author list is reasonable, as the report is about the contribution of ODK.

Request early feedback, review, and final proofreading of the report

by the work package leader
by the coordinator (coordinator@opendreamkit.org)
by whoever else you may think is relevant
Plan ahead, as this will take a couple days!

Write a blog post in ODK's news

Send a notice to participants@opendreamkit.org


* Data


** Introduction to Python for Computational Science and Engineering

- Textbook at https://github.com/fangohr/introduction-to-python-for-computational-science-and-engineering/blob/master/Readme.md
- consists of notebooks, one per chapter
- can be executed online using Binder
- tested with NBVal
- lower barrier towards testing things
- output as html and pdf available

- attach TOC as pdf to deliverable

- mention building and testing in Docker

**

The third interactive text book

* Report snippets

Contributors: Hans Fangohr, Thomas Kluyver, Marijan Beg, Min Ragan-Kelly

** Reducing barriers for learners using interactive textbooks
The Jupyter notebook as a virtual researc environment holds great
potential for the creation and use of interactive dockments. In this
context, we investigate and prototype the use of such interactive
notebooks in the context of education at university level.

There is a long history in academia to provide text books either as
the main point of reference for a give lecture course, or as
additional "background reading" to provide more details which cannot
be covered by blackboard or slides centric lectures, typically due to
the lack of time available for such learning.

While providing potentially a wealth of information, such text books
are static, and require unusual skill to be learned from
exclusively. Instead, it is a common model to ask students to carry
out practical problem-solving exercises: this enforces engagement with
the material and supports deep learning of the subject.

For computatial problems, there is ofter significant effort required
to set up an environment of software (such as Python with required
libraries) and then a problem environment that allows the study of the
topic under investigation. For example, to solve a differential
equation numerically, one the problem environment includes setting up
functions describing the ODE, boundary conditions, and a grid on which
the numerical solution should be obtained. Once this point is reached,
the student can start to explore - for example - the properties of a
numerical method being used to solve the differential equations.

The interactive text books developed here allow to improve the
learning experience by significantly reducing this barrier: both the
software environment and setting up the problem environment are
reduced to open the interactive document in a browser, and navigating
to the point of interest in the text book.

** Computational Science and Engineering
The application of mathematics in science and engineering is the topic
of the text book "Introduction to Computational Science and
Engineering".

The work is based on a text book that was available as a PDF file (and
generated from a \LaTeX{} file). In this deliverable, we have reviewed
the text book and updated it from Python 2 to Python 3, added various
sections and a chapter on Pandas, but most importantly translated the
LaTeX sources into Jupyter Notebooks. Furthermore, we demonstrate and
enhance tools such as the ~bookbook~ and ~nbconvert~ package to enable the
automatic translation of the Jupyter notebook chapters into a single
pdf or a set of html pages.

The pdf is created using LaTeX as an intermediate translation, and
then by compiling the LaTeX to create a high quality pdf file. A LaTeX
file with custom style settings can be given as a template to the
~bookbook~ package. The different chapters (each being one notebook)
are merged automatically, and get a joint table of contents.

The set of html files is organised into one html file per chapter
(each being created from one notebook), and an additional index file
providing links to all chapters.

The translation of the Jupyter-notebook based text book into PDF and
html files is important to provide (at least) the same level of
publication quality outputs that can be expected from the more
traditional LaTeX based manuscript.

The read additional value comes from the the Jupyter Notebook based
nature of the chapters:

(i) Students can download the notebooks, and inspect all computational
steps that have created the results shown in the text book; they can
execute them on their own machine, modify, explore, understand and
extend the examples. As all computational steps are included in the
notebooks, there is no guessing about assumptions, no code being executed
before an example is introduced, or no reconstructions of sections
labelled "the required transformation of X is left as an exercise to
the reader" required: all steps are contained in the notebooks.

This reduces the barrier towards learning. Nevertheless, to download
and execute the notebooks on their own machines, students still need
to install the required software enivronment: in this case a standard
Anaconda Python distribution is sufficient as only the standard
scientific python stack are required dependencies (such as numpy,
scipy, matplotlib, pandas, and the notebook itself).

(ii) This required installation of the software environment can be
avoided using the Binder project (XXX (which Task/Deliv? XXX). As the
MyBinder.org instance can create a cloud-based Jupyter Notebook with a
software specification (for example through a python
~requirements.txt~ file) on demand, every student can start their own
notebook server on MyBinder, browse chapters, and execute chapter
notebooks as they like to achieve better understanding. As all of this
happens in the browser, there is no software installation required.



- translation into turkish
- DOI


---

What was the original goal.

How it fits within the overall ODK picture.

Where the work started from.

What precisely is the deliverable, and was achieved during the project, clarifying the contribution of the ODK participants and of the community.

A brief view on applications, further outcomes, current activities, future plans.

The distinction between what was done before, for, and after the deliverable should be strictly unambigous.

This description should be self-contained. Still, it's recommended to enrich it with cross links as appropriate. In particular add links for all issues on the different component trackers (trac, ...) that have been worked on to achieve the deliverable. The link label/context should be explanatory: the reader should not need to follow the link to know what additional information it provides.

If this gets too long (say more than one page), the details can be left to the report itself.

Double check the deliverable metadata is up to date:
